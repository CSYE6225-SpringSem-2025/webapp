name: Build and Share Custom Images

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  build-and-share:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials for Dev Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.9.4"

      - name: Initialize Packer
        run: |
          cd packer
          packer init .

      - name: Build Images in Dev Account
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          cd packer
          packer build .
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json

      - name: Get Latest AMI ID
        id: get-ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
            --output text)
          echo "AMI ID: $AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Wait for AMI to be available
        run: |
          echo "Waiting for AMI to become available..."
          aws ec2 wait image-available --image-ids ${{ steps.get-ami.outputs.ami_id }}
          echo "AMI is now available."

      - name: Share AMI and Snapshot with Demo Account
        run: |
          AMI_ID="${{ steps.get-ami.outputs.ami_id }}"
          DEMO_ACCOUNT_ID=${{ secrets.DEMO_AWS_ACCOUNT_ID }}
          
          echo "Sharing AMI $AMI_ID with account $DEMO_ACCOUNT_ID"
          # Share the AMI
          aws ec2 modify-image-attribute \
            --image-id $AMI_ID \
            --launch-permission "Add=[{UserId=$DEMO_ACCOUNT_ID}]"
          
          # Get and share the snapshot
          SNAPSHOT_ID=$(aws ec2 describe-images \
            --image-ids $AMI_ID \
            --query 'Images[0].BlockDeviceMappings[0].Ebs.SnapshotId' \
            --output text)
          
          echo "Sharing snapshot $SNAPSHOT_ID with account $DEMO_ACCOUNT_ID"
          aws ec2 modify-snapshot-attribute \
            --snapshot-id $SNAPSHOT_ID \
            --attribute createVolumePermission \
            --operation-type add \
            --user-ids $DEMO_ACCOUNT_ID
          
          # Add a delay to ensure permissions propagate
          echo "Waiting for permissions to propagate..."
          sleep 15

      - name: Configure AWS Credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Copy Shared AMI in Demo Account
        id: copy-ami
        run: |
          AMI_ID="${{ steps.get-ami.outputs.ami_id }}"
          echo "Copying the shared AMI..."
          COPIED_AMI_ID=$(aws ec2 copy-image \
            --source-image-id $AMI_ID \
            --source-region us-east-1 \
            --region us-east-1 \
            --name "Copied-WebApp-AMI-$(date +%Y%m%d-%H%M%S)" \
            --query 'ImageId' \
            --output text)

          echo "Copied AMI ID: $COPIED_AMI_ID"
          echo "copied_ami_id=$COPIED_AMI_ID" >> $GITHUB_OUTPUT

          aws ec2 create-tags \
            --resources $COPIED_AMI_ID \
            --tags Key=Name,Value="Copied-WebApp-AMI"

      - name: Wait for Copied AMI to be available
        run: |
          echo "Waiting for copied AMI to become available..."
          aws ec2 wait image-available --image-ids ${{ steps.copy-ami.outputs.copied_ami_id }}
          echo "Copied AMI is now available."

      - name: Create New Launch Template Version
        id: create-lt-version
        run: |
          # Get the Launch Template ID
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=csye6225_asg" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)
          
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
          
          # Get current version details
          CURRENT_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --versions '$Latest' \
            --query 'LaunchTemplateVersions[0]' \
            --output json)
          
          # Create a new version with updated AMI ID
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --version-description "Updated with AMI ${{ steps.copy-ami.outputs.copied_ami_id }}" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ steps.copy-ami.outputs.copied_ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "Created new Launch Template version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get Auto Scaling Group Name
        id: get-asg
        run: |
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[?contains(Tags[?Key=='Name'].Value, 'webapp') || AutoScalingGroupName=='app-auto-scaling-group'].AutoScalingGroupName" \
            --output text)
          
          echo "Auto Scaling Group Name: $ASG_NAME"
          echo "asg_name=$ASG_NAME" >> $GITHUB_OUTPUT

      - name: Start Instance Refresh
        id: start-refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ steps.get-asg.outputs.asg_name }} \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "Started instance refresh with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to Complete
        run: |
          echo "Waiting for instance refresh to complete..."
          
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ steps.get-asg.outputs.asg_name }} \
              --instance-refresh-ids ${{ steps.start-refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
          
            echo "Current status: $STATUS"
          
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully!"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled."
              exit 1
            fi
          
            echo "Still in progress. Checking again in 30 seconds..."
            sleep 30
          done